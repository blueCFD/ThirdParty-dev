#!/bin/sh
#------------------------------------------------------------------------------
# License
#     Copyright (C) 2011-2014 blueCAPE Lda
#
#     This file is derived from the branch "get-em" available here:
#         https://github.com/wyldckat/ThirdParty-2.0.x/commits/get-em
#
#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#     For more information about these patches, visit:
#         http://bluecfd.com/Core
#
#     It's licensed under the same license of the target software, namely GPL
#     v3 or above (see <http://www.gnu.org/licenses/>).
#
#     The target software is OpenFOAM(R) <http://www.openfoam.org>. It's
#     trademarked by and Copyright (C) 2011-2014 OpenFOAM Foundation
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# File
#     etc/tools/get-em/mpich2
#
# Description
#     This script will gather the necessary information about the application.
#     This script expects to be executed in the base folder where the get-em script is.
#
#------------------------------------------------------------------------------

versionVar="FOAM_MPI"
appName="mpich2"
appDefaultSep="-"
appFileExt="msi"


#
# Shows the description for this application.
#
GE_showDesc()
{
  echo "mpich2-win - Retrieve the MPICH2 package for Windows. Size: 7 to 11MB"
}


#
# Updates the file defined in $versionCacheFile, using the mirror url $1 and
# uses the $testFile as a sandbox.
#
GE_update()
{
  if [ -e ${versionCacheFile} ]; then
    rm -f ${versionCacheFile} && \
    touch ${versionCacheFile}
  fi

  wget "$1" -O $testFile > /dev/null 2>&1
  grep -e '>[0-9]\.[0-9\.]*' $testFile | \
    sed -e 's=.*"\(>[0-9]\.[0-9\.]*[a-crp]*[0-9]*\)/<.*=\1=' -e 's_>_'$appName'-win=_' | \
    grep -v -e '=0.9\|=1.0\|=1.1\|=1.2' | \
    sort -u > ${versionCacheFile}_tmp

  cat ${versionCacheFile}_tmp | \
  while read versionline; do
    version2check=`echo $versionline | sed -e 's_'$appName'-win=__'`
    wget "$1$version2check/" -O $testFile > /dev/null 2>&1
    if [ -n "`grep -e '>'$appName'-'$version2check'.*'$appFileExt $testFile`" ]; then
      echo $versionline >> ${versionCacheFile}
    fi
  done

  rm ${versionCacheFile}_tmp
  rm $testFile
}


#
# Receives the mirror url $1, the real version $2 and the variable $appFileExt.
# Shows the full url for the file to be downloaded.
#
GE_geturl()
{
  if [ $WM_ARCH_OPTION -eq 32 ]; then
    echo ${1}${2}/mpich2-$2-win-ia32.$appFileExt
  else
    echo ${1}${2}/mpich2-$2-win-x86-64.$appFileExt
  fi
}


#
# Echoes the name for the package file for storage. Receives the real version $1.
#
GE_getfilename()
{
  if [ $WM_ARCH_OPTION -eq 32 ]; then
    echo mpich2-$1-win-ia32.$appFileExt
  else
    echo mpich2-$1-win-x86-64.$appFileExt
  fi
}


#
# Echoes the relative path of the target folder. Receives the real version $1.
#
GE_getfolder()
{
  echo platforms/$WM_ARCH$WM_COMPILER/mpich2-$1
}


#
# Echoes the number of folder levels counting from the left that the unpacker
# should drop. This is (or at least it should be) a prevention mechanism for
# tar/zipbombs.
#
GE_levels()
{
  echo 1
}


#
# Unpacks exe/msi formats
# Inputs: /full/path/to/package /futh/path/to/target/folder result_from_GE_levels
#
GE_exe_msi_unpack()
{
  mkdir "$testFile" > /dev/null 2>&1 && \
  mkdir -p $2/bin > /dev/null 2>&1 &&
  mkdir -p $2/lib > /dev/null 2>&1 &&
  mkdir -p $2/include > /dev/null 2>&1 && {
    7z x "$1" -o"$testFile"/ _* > /dev/null
    cd $testFile
    TOUNPACK=`ls -1A _*`
    7z x $TOUNPACK > /dev/null
    rm $TOUNPACK
    unset TOUNPACK
    find . -name "_*" | xargs grep 'MPI_INCLUDED' -sl | xargs -I {} mv {} $2/include/mpi.h
    find . -name "_*" | xargs grep 'MPIO_INCLUDE' -sl | xargs -I {} mv {} $2/include/mpio.h
    find . -name "_*" | xargs grep 'MPICH_IGNORE_CXX_SEEK' -sl | xargs -I {} mv {} $2/include/mpicxx.h
    find . -name "_*" | xargs grep -e 'mpich2mpi\.dll.MPID_Wtick' -sl | xargs -I {} mv {} $2/lib/mpich2mpi.dll
    rm _*
    cd ${WM_THIRD_PARTY_DIR}
  }
  [ -n "$testFile" -a -d "$testFile" ] && rm -rf "$testFile"
}


# Finally source the master script
. etc/tools/get-emScriptFunctions
