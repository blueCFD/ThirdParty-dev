#!/bin/sh
#------------------------------------------------------------------------------
# License
#     Copyright (C) 2011-2014 blueCAPE Lda
#
#     This file is derived from the branch "get-em" available here:
#         https://github.com/wyldckat/ThirdParty-2.0.x/commits/get-em
#
#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#     For more information about these patches, visit:
#         http://bluecfd.com/Core
#
#     It's licensed under the same license of the target software, namely GPL
#     v3 or above (see <http://www.gnu.org/licenses/>).
#
#     The target software is OpenFOAM(R) <http://www.openfoam.org>. It's
#     trademarked by and Copyright (C) 2011-2014 OpenFOAM Foundation
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# File
#     etc/tools/get-em/openmpi-win
#
# Description
#     This script will gather the necessary information about the application.
#     This script expects to be executed in the base folder where the get-em script is.
#
#------------------------------------------------------------------------------

versionVar="FOAM_MPI"
appName="openmpi"
appDefaultSep="-"
appFileExt="exe"


#
# Shows the major version based on the whole version.
#
getMajorVersion()
{
  echo $1 | sed -e 's=\(^[0-9]\.[0-9]\).*=\1='
}


#
# Shows the major+patch version based on the whole version.
#
getMinorVersion()
{
  echo $1 | sed -e 's=\(^[0-9]\.[0-9]\.[0-9]\).*=\1='
}


#
# Shows the cached full version based on the provided version, just in case the
# given version is incomplete.
#
getTrueVersionOnCache()
{
  countversions=`grep $1 ${versionCacheFile}_fullversion | wc -l`
  if [ $countversions -eq 1 ]; then
    grep $1 ${versionCacheFile}_fullversion | sed -e 's/.*=//'
  elif [ $countversions -gt 1 -a "`getMinorVersion $1`" = "$1" ]; then
    grep $1 ${versionCacheFile}_fullversion | grep -e "win$WM_ARCH_OPTION" | \
      sed -e 's/.*=//' | sort -u | tail -n 1
  else
    echo "Version not available on cache"
  fi
}


#
# Shows the description for this application.
#
GE_showDesc()
{
  echo "openmpi-win - Retrieve Open MPI installers for Windows and unpack to the respective platform folder. Size: 3 to 5MB"
}


#
# Updates the file defined in $versionCacheFile, using the mirror url $1 and
# uses the $testFile as a sandbox.
#
GE_update()
{
  #first check available major versions (>=1.5)
  wget "$1" -O $testFile > /dev/null 2>&1
  LIST_MAJOR_VERSIONS=`grep -e 'v[0-9]\.[0-9]/"' $testFile | \
    sed -e 's=.*ompi/v\(.*\)/".*=\1=' | \
    grep -v -e "^1\.[0-4]" | \
    sort -u`
  [ -r "$versionCacheFile" ] && rm $versionCacheFile
  [ -r "${versionCacheFile}_fullversion" ] && rm ${versionCacheFile}_fullversion

  #now cycle through the major versions and list the available minor versions
  for mjv in $LIST_MAJOR_VERSIONS; do
    wget "$1ompi/v$mjv/" -O $testFile > /dev/null 2>&1
    grep -e "OpenMPI_v[0-9][\.0-9\-]*_win[3264]*\.$appFileExt" $testFile | \
      sed -e 's=.*>\(OpenMPI_.*\)\.'$appFileExt'<.*=\1=' -e 's/_v/=/' \
          -e 's=OpenMPI=openmpi-win=' -e 's=\-[0-9]*_win[3264]*==' | \
      sort -u >> ${versionCacheFile}

    grep -e "OpenMPI_v[0-9][\.0-9\-]*_win[3264]*\.$appFileExt" $testFile | \
      sed -e 's=.*>\(OpenMPI_.*\)\.'$appFileExt'<.*=\1=' -e 's/_v/=/' \
          -e 's=OpenMPI=openmpi-win=' | \
      sort -u >> ${versionCacheFile}_fullversion
  done

  rm $testFile
}


#
# Receives the mirror url $1, the real version $2 and the variable $appFileExt.
# Shows the full url for the file to be downloaded.
#
GE_geturl()
{
  MAJORVERSION=`getMajorVersion $2`
  TRUE_DOWN_VERSION=`getTrueVersionOnCache $2`
  echo ${1}ompi/v${MAJORVERSION}/downloads/OpenMPI_v${TRUE_DOWN_VERSION}.${appFileExt}
}


#
# Echoes the name for the package file for storage. Receives the real version $1.
#
GE_getfilename()
{
  TRUE_DOWN_VERSION=`getTrueVersionOnCache $1`
  echo OpenMPI_v${TRUE_DOWN_VERSION}.${appFileExt}
}


#
# Echoes the relative path of the target folder. Receives the real version $1.
#
GE_getfolder()
{
  MAJORMINORversion=`getMinorVersion $1`
  echo platforms/$WM_ARCH$WM_COMPILER/openmpi-$MAJORMINORversion
}


#
# Echoes the number of folder levels counting from the left that the unpacker
# should drop. This is (or at least it should be) a prevention mechanism for
# tar/zipbombs.
#
GE_levels()
{
  echo 1
}


#
# Unpacks exe/msi formats
# Inputs: /full/path/to/package /futh/path/to/target/folder result_from_GE_levels
#
GE_exe_msi_unpack()
{
  mkdir "$testFile" && \
    7z x "$1" -o"$testFile" 1>/dev/null && \
    mkdir -p $2 > /dev/null 2>&1  && \
    mv "$testFile"/\$_OUTDIR/* "$2/"
  [ -n "$testFile" -a -d "$testFile" ] && rm -rf "$testFile"
}


# Finally source the master script
. etc/tools/get-emScriptFunctions
