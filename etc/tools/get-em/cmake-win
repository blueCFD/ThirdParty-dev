#!/bin/sh
#------------------------------------------------------------------------------
# License
#     Copyright (C) 2011-2014 blueCAPE Lda
#
#     This file is derived from the branch "get-em" available here:
#         https://github.com/wyldckat/ThirdParty-2.0.x/commits/get-em
#
#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#     For more information about these patches, visit:
#         http://bluecfd.com/Core
#
#     It's licensed under the same license of the target software, namely GPL
#     v3 or above (see <http://www.gnu.org/licenses/>).
#
#     The target software is OpenFOAM(R) <http://www.openfoam.org>. It's
#     trademarked by and Copyright (C) 2011-2014 OpenFOAM Foundation
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# File
#     etc/tools/get-em/cmake-win
#
# Description
#     This script will gather the necessary information about the application.
#     This script expects to be executed in the base folder where the get-em script is.
#
# FIXME
#   * Currently it is hard-coded to use zip.
#
#------------------------------------------------------------------------------

versionVar="cmake_version"
appName="cmake"
appDefaultSep="" #none needed
appFileExt="zip"


#
# Shows the major version based on the whole version.
#
getMajorVersion()
{
  echo $1 | sed -e 's=\(^[0-9]\.[0-9]*\).*=\1='
}


#
# Shows the description for this application.
#
GE_showDesc()
{
  echo "cmake - Retrieve CMake source code. Size: 10 to 15MB"
}


#
# Updates the file defined in $versionCacheFile, using the mirror url $1 and
# uses the $testFile as a sandbox.
#
GE_update()
{
  #first check available major versions (>=2.6)
  wget "$1" -O $testFile > /dev/null 2>&1
  LIST_MAJOR_VERSIONS=`grep -e "v[2-9]\.[0-9]/" $testFile | \
    sed -e 's=.*>\(v.*/\)</a.*=\1=' -e 's=/==' -e 's=v==' | \
    grep -v -e "^2\.[0-5]" | \
    sort -u`
  [ -r "$versionCacheFile" ] && rm $versionCacheFile

  #now cycle through the major versions and list the available minor versions
  for mjv in $LIST_MAJOR_VERSIONS; do
    wget "$1/v$mjv/" -O $testFile > /dev/null 2>&1
    grep -e "cmake-[0-9]\.[0-9]*\.[0-9]*\.$appFileExt" $testFile | \
      sed -e 's=.*>\(cmake-.*\)\.'$appFileExt'<.*=\1=' -e 's_-_=_' | \
      sort -u >> $versionCacheFile
    grep -e "cmake-[0-9]\.[0-9]*\.[0-9]*\.[0-9]*\.$appFileExt" $testFile | \
      sed -e 's=.*>\(cmake-.*\)\.'$appFileExt'<.*=\1=' -e 's_-_=_' | \
      sort -u >> $versionCacheFile
  done

  rm $testFile
}


#
# Receives the mirror url $1, the real version $2 and the variable $appFileExt.
# Shows the full url for the file to be downloaded.
#
GE_geturl()
{
  MAJORVERSION=`getMajorVersion $2`
  echo ${1}v$MAJORVERSION/cmake-$2-win32-x86.$appFileExt
}


#
# Echoes the name for the package file for storage. Receives the real version $1.
#
GE_getfilename()
{
  echo $appName-$1-win32-x86.$appFileExt
}


#
# Echoes the relative path of the target folder. Receives the real version $1.
#
GE_getfolder()
{
  echo platforms/$WM_ARCH$WM_COMPILER/$appName-$1
}


#
# Echoes the number of folder levels counting from the left that the unpacker
# should drop. This is (or at least it should be) a prevention mechanism for
# tar/zipbombs.
#
GE_levels()
{
  echo 1
}


# Finally source the master script
. etc/tools/get-emScriptFunctions
