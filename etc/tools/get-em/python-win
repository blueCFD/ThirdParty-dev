#!/bin/sh
#------------------------------------------------------------------------------
# License
#     Copyright (C) 2011-2014 blueCAPE Lda
#
#     This file is derived from the branch "get-em" available here:
#         https://github.com/wyldckat/ThirdParty-2.0.x/commits/get-em
#
#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#     For more information about these patches, visit:
#         http://bluecfd.com/Core
#
#     It's licensed under the same license of the target software, namely GPL
#     v3 or above (see <http://www.gnu.org/licenses/>).
#
#     The target software is OpenFOAM(R) <http://www.openfoam.org>. It's
#     trademarked by and Copyright (C) 2011-2014 OpenFOAM Foundation
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# File
#     etc/tools/get-em/python-win
#
# Description
#     This script will gather the necessary information about the application.
#     This script expects to be executed in the base folder where the get-em script is.
#
#------------------------------------------------------------------------------

versionVar="PYTHON_VERSION"
appName="python"
appDefaultSep="" #not needed
appFileExt="msi"


# get PYTHON_VERSION, PYTHON_ARCH_PATH
if settings=`$WM_PROJECT_DIR/bin/foamEtcFile config/python-win.sh`
then
    . $settings
else
    echo
    echo "Error: no config/python-win.sh settings"
    echo
    exit 1
fi


#
# Shows the description for this application.
#
GE_showDesc()
{
  echo "python-win - Retrieve the Python installers for Windows. Size: 10-20MB"
}


#
# Updates the file defined in $versionCacheFile, using the mirror url $1 and
# uses the $testFile as a sandbox.
#
GE_update()
{
  wget "$1" -O $testFile > /dev/null 2>&1
  [ -e "$versionCacheFile" ] && rm $versionCacheFile
  grep -e '"[0-9]\.[0-9\.]*/' $testFile | \
    sed -e 's=.*\("[0-9]\.[0-9\.]*\)/.*=\1=' -e 's_"_'$appName'-win=_' | \
    sort -u > ${versionCacheFile}_tmp
    
  cat ${versionCacheFile}_tmp | \
  while read versionline; do
    version2check=`echo $versionline | sed -e 's_'$appName'-win=__'`
    wget "$1$version2check/" -O $testFile > /dev/null 2>&1
    if [ -n "`grep -e '>'$appName'-'$version2check'.*'$appFileExt $testFile`" ]; then
      echo $versionline >> ${versionCacheFile}
    fi
  done

  rm ${versionCacheFile}_tmp
  rm $testFile
}


#
# Receives the mirror url $1, the real version $2 and the variable $appFileExt.
# Shows the full url for the file to be downloaded.
#
GE_geturl()
{
  if [ $WM_ARCH_OPTION -eq 32 ]; then
    echo ${1}${2}/$appName-$2.$appFileExt
  else
    echo ${1}${2}/$appName-$2.amd64.$appFileExt
  fi
}


#
# Echoes the name for the package file for storage. Receives the real version $1.
#
GE_getfilename()
{
  if [ $WM_ARCH_OPTION -eq 32 ]; then
    echo $appName-$1.$appFileExt
  else
    echo $appName-$1.amd64.$appFileExt
  fi
}


#
# Echoes the relative path of the target folder. Receives the real version $1.
#
GE_getfolder()
{
  echo platforms/$WM_ARCH$WM_COMPILER/$appName-$1
}


#
# Echoes the number of folder levels counting from the left that the unpacker
# should drop. This is (or at least it should be) a prevention mechanism for
# tar/zipbombs.
#
GE_levels()
{
  echo 1
}


#
# Unpacks exe/msi formats
# Inputs: /full/path/to/package /futh/path/to/target/folder result_from_GE_levels
#
GE_exe_msi_unpack()
{
  mkdir "$testFile" && \
    7z x "$1" -o"$testFile" python 1>/dev/null && \
    mkdir -p $2 > /dev/null 2>&1  && \
    { 
      7z x "$testFile/python" "*.h" -o"$2/include/" 1>/dev/null
      7z x "$testFile/python" "*python*.dll" -o"$2/lib/" 1>/dev/null
    }
  [ -n "$testFile" -a -d "$testFile" ] && rm -rf "$testFile"
}


# Finally source the master script
. etc/tools/get-emScriptFunctions
